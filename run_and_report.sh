#!/bin/bash

#################################################################
# 1. USER CONFIGURATION: SET THESE TWO PATHS
#################################################################

# --- SET YOUR PATHS HERE ---

# Path to the directory containing clang, opt, llc, etc.
# LINUX Example: LLVM_BIN=/usr/bin
# WINDOWS Example: LLVM_BIN=/c/LLVM/bin


# Path to the directory where your compiled plugin is located.
# LINUX Example: PLUGIN_DIR=/home/user/SimpleObfPass/build
# WINDOWS Example: PLUGIN_DIR=/c/Users/mushe/Desktop/Musheer_CS1/SIH/SimpleObfPass/build


# --- END OF USER CONFIGURATION ---


#################################################################
# 2. PLATFORM-SPECIFIC CONFIGURATION (AUTOMATIC)
#################################################################

echo ">> Detecting Operating System..."
case "$(uname -s)" in
    Linux*)
        echo ">> Running on Linux."
        PLUGIN_DIR=/mnt/c/Users/mushe/Desktop/Musheer_CS1/SIH/SimpleObfPass/build
        PLUGIN_EXT=".so"
        EXE_EXT=""
        MOUNT=/mnt/
        ;;
    MINGW*|MSYS*|CYGWIN*)
        echo ">> Running on Windows (MSYS/Git Bash/Cygwin)."
        PLUGIN_DIR=/c/Users/mushe/Desktop/Musheer_CS1/SIH/SimpleObfPass/build
        PLUGIN_EXT=".dll"
        EXE_EXT=".exe"
        MOUNT=""
        ;;
    *)
        echo "!! Unsupported OS: $(uname -s). Exiting."
        exit 1
        ;;
esac
LLVM_BIN="$MOUNT/c/LLVM/bin"
# Construct the full path to the plugin library
PLUGIN="$PLUGIN_DIR/libSimpleObfPass$PLUGIN_EXT"
PASSNAME=simple-obf
WORKDIR=./obf_run

# Check if the plugin file exists
if [ ! -f "$PLUGIN" ]; then
    echo "!! ERROR: Plugin not found at: $PLUGIN"
    echo "!! Please check your PLUGIN_DIR path and ensure the project is compiled for the current OS."
    exit 1
fi

#################################################################
# 3. SCRIPT EXECUTION
#################################################################

# Clean up previous run
rm -rf "$WORKDIR"
mkdir -p "$WORKDIR"
cd "$WORKDIR"

echo ">> Preparing initial files..."
# Generate canonical original .ll (no plugin)
$LLVM_BIN/clang$EXE_EXT -S -emit-llvm -O0 -fno-inline -g ../test.c -o test.original.ll
echo ">> Original LLVM IR generated."

# Run opt with your plugin to produce obf.ll and capture the log
echo ">> Running obfuscation pass..."
$LLVM_BIN/opt$EXE_EXT -load-pass-plugin="$PLUGIN" -passes="$PASSNAME" -S test.original.ll -o test.obf.ll 2> transformation.log
echo ">> Obfuscated LLVM IR and transformation log generated."

# Make objects from each IR
$LLVM_BIN/llc$EXE_EXT -filetype=obj -o test.original.o test.original.ll
$LLVM_BIN/llc$EXE_EXT -filetype=obj -o test.obf.o      test.obf.ll

# Disassemble the objects
$LLVM_BIN/llvm-objdump$EXE_EXT -d test.original.o > orig.asm
$LLVM_BIN/llvm-objdump$EXE_EXT -d test.obf.o      > obf.asm

# Compile the two objects into executables
echo ">> Linking final executables..."
$LLVM_BIN/clang$EXE_EXT test.original.o -o test.original$EXE_EXT || true
$LLVM_BIN/clang$EXE_EXT test.obf.o      -o test.obf$EXE_EXT      || true
echo ">> Executables created."


#################################################################
# 4. REPORT GENERATION
#################################################################

echo ">> Generating report.md..."

(
echo "# 🛡️ Obfuscation Transformation Report"
echo ""
echo "**Date:** $(date)"
echo "**Platform:** $(uname -s)"
echo ""
echo "This report details the changes made by the \`simple-obf\` LLVM pass on the input file \`test.c\`."
echo ""
echo "## 1. Transformation Log"
echo ""
echo "The following log was generated by the pass itself, detailing its actions:"
echo '```log'
cat transformation.log
echo '```'
echo ""
echo "---"
echo ""
echo "## 2. LLVM IR Diff"
echo ""
echo "A comparison of the LLVM Intermediate Representation before and after the pass. This shows the logical changes to the code's structure."
echo '```diff'
diff -u test.original.ll test.obf.ll || true
echo '```'
echo ""
echo "---"
echo ""
echo "## 3. Assembly Code Diff"
echo ""
echo "A comparison of the final assembly code. This shows the impact on the machine code that will be executed."
# Normalize assembly to make diff cleaner
sed -E 's/^[[:space:]]*[0-9A-Fa-fx:]+[[:space:]]*//' orig.asm | sed 's/#[[:space:]].*$//' | sed '/^\s*$/d' > orig.norm
sed -E 's/^[[:space:]]*[0-9A-Fa-fx:]+[[:space:]]*//' obf.asm  | sed 's/#[[:space:]].*$//' | sed '/^\s*$/d' > obf.norm
echo '```diff'
diff -u orig.norm obf.norm || true
echo '```'
echo ""
echo "---"
echo ""
echo "## 4. Functional Verification"
echo ""
echo "Running both executables to ensure their behavior remains identical."
echo ""
) > report.md

echo ">> Report generation complete: report.md"
echo ">> All tasks finished successfully."
